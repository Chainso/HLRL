from typing import Any, Dict, Tuple, OrderedDict

from hlrl.core.common.wrappers import MethodWrapper


class RecurrentAgent(MethodWrapper):
    """
    A recurrent agent that holds a hidden state.
    """
    def __init__(self, agent):
        """
        Turns the agent into a recurrent agent.
        """
        super().__init__(agent)

        self.hidden_state = None

    def set_hidden_state(self, hidden_state):
        """
        Sets the hidden state to the given one.
        """
        self.hidden_state = hidden_state

    def transform_state(self, state):
        """
        Appends the hidden state to the algorithm inputs.
        """
        transed_state = self.om.transform_state(state)
        transed_state["hidden_state"] = self.hidden_state

        return transed_state

    def transform_algo_step(
            self,
            algo_step: Tuple[Any, ...]
        ) -> OrderedDict[str, Any]:
        """
        Updates the hidden state to the last output of the algorithm.
        
        Args:
            algo_step: The outputs of the algorithm on the input state.

        Returns:
            An ordered dictionary of the algorithm outputs with
            "next_hidden_state" mapping to the returned hidden state.
        """
        transed_algo_step = self.om.transform_algo_step(algo_step[:-1])
        transed_algo_step["next_hidden_state"] = algo_step[-1]

        return transed_algo_step

    def after_step(
            self,
            experience: Dict[str, Any],
            next_algo_inp: OrderedDict[str, Any]
        ) -> None:
        """
        Sets the hidden state to the next hidden state of the experience.

        Args:
            experience: The experience generated by the step.
            next_algo_inp: The inputs to the algorithm to process the next
                state.
        """
        self.om.after_step(experience, next_algo_inp)
        self.set_hidden_state(experience["next_hidden_state"])

    def clean_experiences(
            self,
            experiences: Tuple[Dict[str, Any], ...]
        ):
        """
        Removes the next hidden states from the experiences.

        Args:
            experiences: The prepared experiences to clean.

        Returns:
            The prepared experiences without the next state hiddens
        """
        for experience in experiences:
            del experience["next_hidden_state"]

        return self.om.clean_experiences(experiences)

    def reset(self):
        """
        Resets the agent's hidden state
        """
        self.set_hidden_state(self.obj.algo.reset_hidden_state())
